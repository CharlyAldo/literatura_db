package com.literalura.literatura_console;

import com.literalura.literatura_console.model.Libro;
import com.literalura.literatura_console.service.LibroService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.IOException;
import java.util.List;
import java.util.Scanner;

@SpringBootApplication
public class LiteraturaConsoleApplication implements CommandLineRunner {

	@Autowired
	private LibroService servicio;

	private final Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		SpringApplication.run(LiteraturaConsoleApplication.class, args);
	}

	@Override
	public void run(String... args) throws IOException, InterruptedException {
		System.out.println("üìö Bienvenido a Literalura - Tu biblioteca de libros de dominio p√∫blico");
		System.out.println("=".repeat(70));

		boolean salir = false;
		while (!salir) {
			mostrarMenu();
			String opcion = sc.nextLine().trim();

			try {
				switch (opcion) {
					case "1" -> buscarLibroPorTitulo();
					case "2" -> listarLibrosGuardados();
					case "3" -> listarAutoresGuardados();
					case "4" -> listarAutoresVivosEnAnio();
					case "5" -> listarLibrosPorIdioma();
					case "0" -> {
						salir = true;
						System.out.println("üëã ¬°Hasta pronto!");
					}
					default -> System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, elige una opci√≥n del men√∫.");
				}
			} catch (Exception e) {
				System.out.println("‚ö†Ô∏è  Ocurri√≥ un error inesperado: " + e.getMessage());
			}
			System.out.println(); // Espacio entre operaciones
		}
		sc.close();
	}

	private void mostrarMenu() {
		System.out.println("¬øQu√© deseas hacer?");
		System.out.println("1 - üîç Buscar libro por t√≠tulo");
		System.out.println("2 - üìö Listar libros guardados");
		System.out.println("3 - üë§ Listar autores guardados");
		System.out.println("4 - üï∞Ô∏è  Autores vivos en un a√±o");
		System.out.println("5 - üåç Listar libros por idioma");
		System.out.println("0 - üö™ Salir");
		System.out.print("üëâ Elige una opci√≥n: ");
	}

	private void buscarLibroPorTitulo() throws IOException, InterruptedException {
		System.out.print("Ingrese el t√≠tulo del libro: ");
		String titulo = sc.nextLine().trim();
		if (titulo.isEmpty()) {
			System.out.println("‚ö†Ô∏è  El t√≠tulo no puede estar vac√≠o.");
			return;
		}

		servicio.buscarYGuardarPorTitulo(titulo)
				.ifPresentOrElse(
						libro -> System.out.println("‚úÖ Guardado: \"" + libro.getTitulo() +
								"\" ‚Äî " + (libro.getAutor() != null ? libro.getAutor().getNombre() : "-")),
						() -> System.out.println("‚ùå No se encontr√≥ ning√∫n libro con ese t√≠tulo en Gutendex.")
				);
	}

	private void listarLibrosGuardados() {
		List<Libro> libros = servicio.listarLibros();
		if (libros.isEmpty()) {
			System.out.println("üì≠ No hay libros guardados en la base de datos.");
			return;
		}
		System.out.println("üìñ Libros guardados (" + libros.size() + "):");
		System.out.println("‚îÄ".repeat(50));
		libros.forEach(libro -> System.out.printf(" ‚Ä¢ %-40s ‚Äî %s%n",
				truncar(libro.getTitulo(), 40),
				libro.getAutor() != null ? libro.getAutor().getNombre() : "Sin autor"));
	}

	private void listarAutoresGuardados() {
		var autores = servicio.listarAutores();
		if (autores.isEmpty()) {
			System.out.println("üì≠ No hay autores guardados.");
			return;
		}
		System.out.println("üë• Autores guardados (" + autores.size() + "):");
		System.out.println("‚îÄ".repeat(30));
		autores.forEach(autor -> System.out.println(" ‚Ä¢ " + autor.getNombre()));
	}

	private void listarAutoresVivosEnAnio() {
		System.out.print("Ingrese el a√±o: ");
		String anioStr = sc.nextLine().trim();
		try {
			Integer anio = Integer.parseInt(anioStr);
			var autores = servicio.autoresVivosEnAnio(anio);
			if (autores.isEmpty()) {
				System.out.println("üì≠ No se encontraron autores vivos en el a√±o " + anio + ".");
			} else {
				System.out.println("üï∞Ô∏è  Autores vivos en " + anio + " (" + autores.size() + "):");
				System.out.println("‚îÄ".repeat(30));
				autores.forEach(autor -> System.out.println(" ‚Ä¢ " + autor.getNombre()));
			}
		} catch (NumberFormatException e) {
			System.out.println("‚ùå Por favor, ingrese un n√∫mero v√°lido.");
		}
	}

	private void listarLibrosPorIdioma() {
		System.out.println("üåç Selecciona un idioma:");
		System.out.println("1 - üá¨üáß Ingl√©s (en)");
		System.out.println("2 - üá™üá∏ Espa√±ol (es)");
		System.out.println("3 - üá´üá∑ Franc√©s (fr)");
		System.out.println("4 - üáÆüáπ Italiano (it)");
		System.out.print("üëâ Elige una opci√≥n: ");
		String idiomaOpt = sc.nextLine().trim();

		String codigo = switch (idiomaOpt) {
			case "1" -> "en";
			case "2" -> "es";
			case "3" -> "fr";
			case "4" -> "it";
			default -> null;
		};

		if (codigo == null) {
			System.out.println("‚ùå Opci√≥n no v√°lida.");
			return;
		}

		String nombre = nombreIdioma(codigo);
		List<Libro> libros = servicio.librosPorIdioma(codigo);

		if (libros.isEmpty()) {
			System.out.println("üì≠ No se encontraron libros en " + nombre + ".");
		} else {
			System.out.println("üìñ Libros en " + nombre + " (" + libros.size() + "):");
			System.out.println("‚îÄ".repeat(50));
			libros.forEach(libro -> System.out.printf(" ‚Ä¢ %-40s ‚Äî %s%n",
					truncar(libro.getTitulo(), 40),
					libro.getAutor() != null ? libro.getAutor().getNombre() : "Sin autor"));
		}
	}

	private String nombreIdioma(String codigo) {
		return switch (codigo) {
			case "en" -> "Ingl√©s";
			case "es" -> "Espa√±ol";
			case "fr" -> "Franc√©s";
			case "it" -> "Italiano";
			default -> "Desconocido";
		};
	}

	// Utilidad para truncar t√≠tulos largos
	private String truncar(String texto, int longitud) {
		if (texto == null) return "Desconocido";
		return texto.length() > longitud ? texto.substring(0, longitud - 3) + "..." : texto;
	}
}